[["data-mining.html", "Chapter 5 Data Mining 5.1 Supervised 5.2 Unsupervised", " Chapter 5 Data Mining 5.1 Supervised 5.1.1 KNN 5.1.1.1 Choose K The first step in employing a KNN model is to define the value of k. In this algorithm technique, k is the number of neighbors to assess before determining the value of the current observation. A low k results in a higher variance model (and will lean towards overfitting), whereas a high k results in a higher bias model (and will lean towards underfitting). A common practice is to start with a k = sqrt(n) (where n is the number of samples in the training dataset) and tune this parameter utilizing a validation set or cross-validation. 5.1.1.2 Measuring Distance Euclidean distance is the base measure used in most KNN functions. However, there are other well-known distance measures that can be used such as cosine similarity measure, Minkowski distance, and Chi-square. Alternatively, users can also create their own, more creative distance metrics based on knowledge of the data used. Each distance measurement will affect the results differently. 5.1.1.3 Classification/Prediction Rules The output or value of a new observation is based on the nearest neighbors of the new observation. However, there are many different ways to have those neighbors define the new observation. Classification: majority rules is the most common classification rule, with the most frequent target outcome value within the nearest neighbors being used to determine the classification. If using this method, it is best to set an odd k value such that there are no ties in voting (if there are two classes). Another example for a classification rule is weighting the vote by the nearness of the neighbor. Alternatively, the user can set another rule if it is expected to fit the data better. Prediction: common rules are using the mean or median of the nearest neighbors. Again, the user can set another rule if it is expected to create better predictions. 5.1.1.4 Assumptions and Other Notes KNN is a non-parametric algorithm with no assumptions about the underlying data (other than having a representative training data set). Additionally, it is considered a lazy learner algorithm as it does not learn from the data, but instead stores it and makes classifications/predictions based on the rules set by the user. It is a very simple and flexible model that allows for creativity by the user. However, it can be computationally expensive when classifying new observations, requires storage for the training data, is susceptible to noise, and can require a lot of data preprocessing for distance metrics. Additionally, the model can produce very different results depending on the user-defined parameters and decisions. In order to run KNN in R, all categorical variables must first be converted into numeric variables. 5.1.2 CART: Classification and Regression Trees 5.1.2.1 Data Processing Decision trees can handle categorical, continuous, and discrete data. However, ordinal variables tend to be treated as continuous to preserve the importance of order. Decision trees can also handle missing values by setting those values as a missing category. Before building the model, create separate train and test datasets (a validation dataset is optional). The decision tree will be trained on the training dataset and evaluated on the test dataset. 5.1.2.2 Choosing Best Splits Classification: maximizing purity is the determining factor in identifying the best splits within classification trees. Purity measures how homogeneous the nodes are following split points. Most commonly, Gini and Entropy are used as measures of impurity to calculate the best splits. Regression: minimizing SSE (Sum of Squared Errors) determines the splits within the tree. 5.1.2.3 Model Building and Predictions After determining the splits and processing the data, the next step is to build the model. There are several functions within R and Python that will help in easily creating a regression or classification tree. When building the model, the training data set is used to find the best splits for predictions. In a classification tree, the prediction is the most common class in the final node. In a regression tree, the prediction is the average value of the target variable in the final node. For both instances, users can change the determination criteria in the final node if desired. 5.1.2.4 Evaluation Confusion matrices, accuracy scores, and F1 scores are the most common evaluation metrics for classification problems. MAE, MAPE, RMSE, R-Squared, and Adjusted R-Squared are the most common evaluation metrics for regression analysis. 5.1.2.5 Pruning and Tuning Pruning decision trees can be helpful in preventing overfitting and reducing the computational power required to create the model. In a classification tree, pruning occurs by removing the nodes in a bottom-up fashion by first removing the splits with the lowest gain values (while optimizing performance on the validation dataset). For regression trees, pruning can be determined by assessing cross-validation error values and employing the One Standard Error rule. This includes evaluating the split with the lowest cross-validation error value and removing all splits within one standard error of that split. After creating and evaluating a model, it may be advantageous to tune the parameters available. Tuning grids can be used to find the optimal parameters on a training dataset that will help with prediction values for the validation and test sets. Depending on the language and package used, parameters may be different. 5.2 Unsupervised 5.2.1 Data Clustering Clustering allows groups to be found within a dataset. It is unsupervised, so we do not know which group an observation belongs to in advance. Evaluating cluster results is nontrivial as the target variable is not known. However, the Silhouette Coefficient and Dunns Index are two evaluation options. More information can be found here. Hard clustering means each observation can only belong to one cluster. Fuzzy clustering gives observations probabilities of being in the different clusters rather than assigning them to any one cluster. 5.2.1.1 Hard Hard clustering assigns each observation to only one cluster. Flat and hierarchical are two types of hard clustering. Flat clustering methods require a resolution parameter, while hierarchical clustering methods do not need a resolution parameter (which will be determined automatically). 5.2.1.1.1 Flat Flat clustering is a type of hard clustering, meaning each observation can only belong to one cluster. Flat clustering requires a resolution parameter, such as how many clusters to create (k) or step size (epsilon). 5.2.1.1.1.1 K-means K-means is a type of hard clustering, meaning each observation can only belong to one cluster. It is also flat rather than hierarchical so the number of clusters must be specified. There are a variety of ways to pick the number of clusters (e.g., elbow plot, gap statistic, silhouette method, etc.). K-means requires continuous variables, so all categorical variables must first be dummy coded. Outliers greatly affect the results, so continuous variables should be standardized. The k-means algorithm will find the centroid (mean) of each variable by minimizing the sum of squares within (SSW). SSW is the clustering name for SSE. 5.2.1.1.1.2 DBSCAN DBSCAN is a type of hard clustering, meaning each observation can only belong to one cluster. It is also a type of flat clustering because epsilon needs to be specified, which the algorithm will pick automatically. Epsilon is the radius of the circle the algorithm looks within when enlarging the cluster size, and can be thought of as a step size. Unlike k-means, it is a spatial clustering algorithm, which clusters based on a distance matrix. A downside to DBSCAN is that since it is a spatial clustering algorithm, it can confuse semantic meanings when the observations occupy the same space. For this reason, it is a good idea to plot the data first to see if clustering spatially is a good option. 5.2.1.1.2 Hierarchical Hierarchical clustering is a type of hard clustering, meaning each observation can only belong to one cluster. The algorithm chooses the resolution parameter (such as the number of clusters) automatically. Dendrograms are often used to visualize hierarchical clustering output. There are two main types of hierarchical clustering: agglomerative and divisive. 5.2.1.1.2.1 Agglomerative Agglomerative clustering is a type of hard clustering, meaning each observation can only belong to one cluster. It is also a type of hierarchical clustering and so you dont have to specify the number of clusters; the algorithm will pick for you. Agglomerative clustering begins with all observations in their own individual clusters and combines them one at a time based on dissimilarity until they are all in one cluster. There are a number of distance measures to compute the dissimilarity matrix (e.g., Euclidean, Manhattan, etc.). There are also different linkage options (e.g., single, average, maximum, etc.), which should be chosen based on the cluster validation metric being used. Agglomerative clustering requires continuous variables, so all categorical variables must first be dummy coded. Outliers greatly affect the results, so continuous variables should be standardized. Use a dendrogram to visualize. 5.2.1.1.2.2 Divisive Divisive clustering is a type of hard clustering, meaning each observation can only belong to one cluster. It is also a type of hierarchical clustering and so you dont have to specify the number of clusters; the algorithm will pick for you. Divisive clustering begins with all observations in one cluster and separates them one at a time based on dissimilarity until they areall in their own individual clusters. There are a number of distance measures to compute the dissimilarity matrix (e.g., Euclidean, Manhattan, etc.). Use a dendrogram to visualize. 5.2.1.2 Fuzzy Fuzzy clustering gives observations probabilities of being in the different clusters rather than assigning them to any one cluster. 5.2.1.2.1 FCM Fuzzy c-means clustering (FCM) is a type of fuzzy clustering. Observations are given probabilities of being in the different clusters rather than being assigned to any one cluster. The number of clusters and iterations need to be specified. It randomly assigns observations to clusters initially and then corrects clusters with each iteration to minimize error. More information on FCM can be found here. 5.2.1.2.2 GMM Gaussian Mixture Model (GMM) clustering is a type of fuzzy clustering. Observations are given probabilities of being in the different clusters rather than being assigned to any one cluster. If using Gaussian rather than frequentist analytic approaches, these probabilities can serve at the posterior distribution. GMMs use maximum likelihood estimation and assume the data is made up of Gaussian distributions. Information from both the centers of the distributions and covariance matrices are used to define the elliptical density groupings into clusters. A downside is that GMM may not converge if there are not enough representatives from each cluster. More information on GMM can be found here. 5.2.2 Assocation Analysis 5.2.2.1 Data Processing To conduct association analysis, transactional data must be provided in a wide format. 5.2.2.2 Finding Association Rules There are built-in functions in R (arules) that can help identify association rules. It is common practice to establish minimum support and confidence values that must be met for the result to be printed. There are other parameters to create more specific rules, such as setting a minimum lift value. 5.2.2.3 Assessing Association Rule Strength There are three main statistics in measuring the strength of an association rule: 1) Support: the probability of seeing these items together. 2) Confidence: the probability of seeing the consequent (second item) given the antecedent (first item) 3) Lift: how much more likely the consequent is present given that the antecedent is already present than just seeing the consequent. Lifts higher than 1 are desirable. 5.2.2.4 Miscellaneous Notes There is no time aspect in association analysis. Instead, we are analyzing what products or items are to be bought, removed, etc., simultaneously. When assessing two items, the support and lift will be the same when switching the order of the antecedent and consequent. However, the confidence will be different. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
